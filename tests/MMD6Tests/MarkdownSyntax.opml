<?xml version="1.0" encoding="utf-8"?>
<opml version="1.0">
<body>
<outline text="Markdown: Syntax" _note="&#10;&lt;ul id=&quot;ProjectSubmenu&quot;&gt;&#10;    &lt;li&gt;&lt;a href=&quot;/projects/markdown/&quot; title=&quot;Markdown Project Page&quot;&gt;Main&lt;/a&gt;&lt;/li&gt;&#10;    &lt;li&gt;&lt;a href=&quot;/projects/markdown/basics&quot; title=&quot;Markdown Basics&quot;&gt;Basics&lt;/a&gt;&lt;/li&gt;&#10;    &lt;li&gt;&lt;a class=&quot;selected&quot; title=&quot;Markdown Syntax Documentation&quot;&gt;Syntax&lt;/a&gt;&lt;/li&gt;&#10;    &lt;li&gt;&lt;a href=&quot;/projects/markdown/license&quot; title=&quot;Pricing and License Information&quot;&gt;License&lt;/a&gt;&lt;/li&gt;&#10;    &lt;li&gt;&lt;a href=&quot;/projects/markdown/dingus&quot; title=&quot;Online Markdown Web Form&quot;&gt;Dingus&lt;/a&gt;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&#10;*   [Overview](#overview)&#10;    *   [Philosophy](#philosophy)&#10;    *   [Inline HTML](#html)&#10;    *   [Automatic Escaping for Special Characters](#autoescape)&#10;*   [Block Elements](#block)&#10;    *   [Paragraphs and Line Breaks](#p)&#10;    *   [Headers](#header)&#10;    *   [Blockquotes](#blockquote)&#10;    *   [Lists](#list)&#10;    *   [Code Blocks](#precode)&#10;    *   [Horizontal Rules](#hr)&#10;*   [Span Elements](#span)&#10;    *   [Links](#link)&#10;    *   [Emphasis](#em)&#10;    *   [Code](#code)&#10;    *   [Images](#img)&#10;*   [Miscellaneous](#misc)&#10;    *   [Backslash Escapes](#backslash)&#10;    *   [Automatic Links](#autolink)&#10;&#10;&#10;**Note:** This document is itself written using Markdown; you&#10;can [see the source for it by adding &apos;.text&apos; to the URL][src].&#10;&#10;  [src]: /projects/markdown/syntax.text&#10;&#10;* * *&#10;&#10;&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;&#10;&#10;&lt;h3 id=&quot;philosophy&quot;&gt;Philosophy&lt;/h3&gt;&#10;&#10;Markdown is intended to be as easy-to-read and easy-to-write as is feasible.&#10;&#10;Readability, however, is emphasized above all else. A Markdown-formatted&#10;document should be publishable as-is, as plain text, without looking&#10;like it&apos;s been marked up with tags or formatting instructions. While&#10;Markdown&apos;s syntax has been influenced by several existing text-to-HTML&#10;filters -- including [Setext][1], [atx][2], [Textile][3], [reStructuredText][4],&#10;[Grutatext][5], and [EtText][6] -- the single biggest source of&#10;inspiration for Markdown&apos;s syntax is the format of plain text email.&#10;&#10;  [1]: http://docutils.sourceforge.net/mirror/setext.html&#10;  [2]: http://www.aaronsw.com/2002/atx/&#10;  [3]: http://textism.com/tools/textile/&#10;  [4]: http://docutils.sourceforge.net/rst.html&#10;  [5]: http://www.triptico.com/software/grutatxt.html&#10;  [6]: http://ettext.taint.org/doc/&#10;&#10;To this end, Markdown&apos;s syntax is comprised entirely of punctuation&#10;characters, which punctuation characters have been carefully chosen so&#10;as to look like what they mean. E.g., asterisks around a word actually&#10;look like \*emphasis\*. Markdown lists look like, well, lists. Even&#10;blockquotes look like quoted passages of text, assuming you&apos;ve ever&#10;used email.&#10;&#10;&#10;&#10;&lt;h3 id=&quot;html&quot;&gt;Inline HTML&lt;/h3&gt;&#10;&#10;Markdown&apos;s syntax is intended for one purpose: to be used as a&#10;format for *writing* for the web.&#10;&#10;Markdown is not a replacement for HTML, or even close to it. Its&#10;syntax is very small, corresponding only to a very small subset of&#10;HTML tags. The idea is *not* to create a syntax that makes it easier&#10;to insert HTML tags. In my opinion, HTML tags are already easy to&#10;insert. The idea for Markdown is to make it easy to read, write, and&#10;edit prose. HTML is a *publishing* format; Markdown is a *writing*&#10;format. Thus, Markdown&apos;s formatting syntax only addresses issues that&#10;can be conveyed in plain text.&#10;&#10;For any markup that is not covered by Markdown&apos;s syntax, you simply&#10;use HTML itself. There&apos;s no need to preface it or delimit it to&#10;indicate that you&apos;re switching from Markdown to HTML; you just use&#10;the tags.&#10;&#10;The only restrictions are that block-level HTML elements -- e.g. `&lt;div&gt;`,&#10;`&lt;table&gt;`, `&lt;pre&gt;`, `&lt;p&gt;`, etc. -- must be separated from surrounding&#10;content by blank lines, and the start and end tags of the block should&#10;not be indented with tabs or spaces. Markdown is smart enough not&#10;to add extra (unwanted) `&lt;p&gt;` tags around HTML block-level tags.&#10;&#10;For example, to add an HTML table to a Markdown article:&#10;&#10;    This is a regular paragraph.&#10;&#10;    &lt;table&gt;&#10;        &lt;tr&gt;&#10;            &lt;td&gt;Foo&lt;/td&gt;&#10;        &lt;/tr&gt;&#10;    &lt;/table&gt;&#10;&#10;    This is another regular paragraph.&#10;&#10;Note that Markdown formatting syntax is not processed within block-level&#10;HTML tags. E.g., you can&apos;t use Markdown-style `*emphasis*` inside an&#10;HTML block.&#10;&#10;Span-level HTML tags -- e.g. `&lt;span&gt;`, `&lt;cite&gt;`, or `&lt;del&gt;` -- can be&#10;used anywhere in a Markdown paragraph, list item, or header. If you&#10;want, you can even use HTML tags instead of Markdown formatting; e.g. if&#10;you&apos;d prefer to use HTML `&lt;a&gt;` or `&lt;img&gt;` tags instead of Markdown&apos;s&#10;link or image syntax, go right ahead.&#10;&#10;Unlike block-level HTML tags, Markdown syntax *is* processed within&#10;span-level tags.&#10;&#10;&#10;&lt;h3 id=&quot;autoescape&quot;&gt;Automatic Escaping for Special Characters&lt;/h3&gt;&#10;&#10;In HTML, there are two characters that demand special treatment: `&lt;`&#10;and `&amp;`. Left angle brackets are used to start tags; ampersands are&#10;used to denote HTML entities. If you want to use them as literal&#10;characters, you must escape them as entities, e.g. `&amp;lt;`, and&#10;`&amp;amp;`.&#10;&#10;Ampersands in particular are bedeviling for web writers. If you want to&#10;write about &apos;AT&amp;T&apos;, you need to write &apos;`AT&amp;amp;T`&apos;. You even need to&#10;escape ampersands within URLs. Thus, if you want to link to:&#10;&#10;    http://images.google.com/images?num=30&amp;q=larry+bird&#10;&#10;you need to encode the URL as:&#10;&#10;    http://images.google.com/images?num=30&amp;amp;q=larry+bird&#10;&#10;in your anchor tag `href` attribute. Needless to say, this is easy to&#10;forget, and is probably the single most common source of HTML validation&#10;errors in otherwise well-marked-up web sites.&#10;&#10;Markdown allows you to use these characters naturally, taking care of&#10;all the necessary escaping for you. If you use an ampersand as part of&#10;an HTML entity, it remains unchanged; otherwise it will be translated&#10;into `&amp;amp;`.&#10;&#10;So, if you want to include a copyright symbol in your article, you can write:&#10;&#10;    &amp;copy;&#10;&#10;and Markdown will leave it alone. But if you write:&#10;&#10;    AT&amp;T&#10;&#10;Markdown will translate it to:&#10;&#10;    AT&amp;amp;T&#10;&#10;Similarly, because Markdown supports [inline HTML](#html), if you use&#10;angle brackets as delimiters for HTML tags, Markdown will treat them as&#10;such. But if you write:&#10;&#10;    4 &lt; 5&#10;&#10;Markdown will translate it to:&#10;&#10;    4 &amp;lt; 5&#10;&#10;However, inside Markdown code spans and blocks, angle brackets and&#10;ampersands are *always* encoded automatically. This makes it easy to use&#10;Markdown to write about HTML code. (As opposed to raw HTML, which is a&#10;terrible format for writing about HTML syntax, because every single `&lt;`&#10;and `&amp;` in your example code needs to be escaped.)&#10;&#10;&#10;* * *&#10;&#10;&#10;&lt;h2 id=&quot;block&quot;&gt;Block Elements&lt;/h2&gt;&#10;&#10;&#10;&lt;h3 id=&quot;p&quot;&gt;Paragraphs and Line Breaks&lt;/h3&gt;&#10;&#10;A paragraph is simply one or more consecutive lines of text, separated&#10;by one or more blank lines. (A blank line is any line that looks like a&#10;blank line -- a line containing nothing but spaces or tabs is considered&#10;blank.) Normal paragraphs should not be indented with spaces or tabs.&#10;&#10;The implication of the &quot;one or more consecutive lines of text&quot; rule is&#10;that Markdown supports &quot;hard-wrapped&quot; text paragraphs. This differs&#10;significantly from most other text-to-HTML formatters (including Movable&#10;Type&apos;s &quot;Convert Line Breaks&quot; option) which translate every line break&#10;character in a paragraph into a `&lt;br /&gt;` tag.&#10;&#10;When you *do* want to insert a `&lt;br /&gt;` break tag using Markdown, you&#10;end a line with two or more spaces, then type return.&#10;&#10;Yes, this takes a tad more effort to create a `&lt;br /&gt;`, but a simplistic&#10;&quot;every line break is a `&lt;br /&gt;`&quot; rule wouldn&apos;t work for Markdown.&#10;Markdown&apos;s email-style [blockquoting][bq] and multi-paragraph [list items][l]&#10;work best -- and look better -- when you format them with hard breaks.&#10;&#10;  [bq]: #blockquote&#10;  [l]:  #list&#10;&#10;&#10;&#10;&lt;h3 id=&quot;header&quot;&gt;Headers&lt;/h3&gt;&#10;&#10;Markdown supports two styles of headers, [Setext][1] and [atx][2].&#10;&#10;Setext-style headers are &quot;underlined&quot; using equal signs (for first-level&#10;headers) and dashes (for second-level headers). For example:&#10;&#10;    This is an H1&#10;    =============&#10;&#10;    This is an H2&#10;    -------------&#10;&#10;Any number of underlining `=`&apos;s or `-`&apos;s will work.&#10;&#10;Atx-style headers use 1-6 hash characters at the start of the line,&#10;corresponding to header levels 1-6. For example:&#10;&#10;    # This is an H1&#10;&#10;    ## This is an H2&#10;&#10;    ###### This is an H6&#10;&#10;Optionally, you may &quot;close&quot; atx-style headers. This is purely&#10;cosmetic -- you can use this if you think it looks better. The&#10;closing hashes don&apos;t even need to match the number of hashes&#10;used to open the header. (The number of opening hashes&#10;determines the header level.) :&#10;&#10;    # This is an H1 #&#10;&#10;    ## This is an H2 ##&#10;&#10;    ### This is an H3 ######&#10;&#10;&#10;&lt;h3 id=&quot;blockquote&quot;&gt;Blockquotes&lt;/h3&gt;&#10;&#10;Markdown uses email-style `&gt;` characters for blockquoting. If you&apos;re&#10;familiar with quoting passages of text in an email message, then you&#10;know how to create a blockquote in Markdown. It looks best if you hard&#10;wrap the text and put a `&gt;` before every line:&#10;&#10;    &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&#10;    &gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&#10;    &gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&#10;    &gt; &#10;    &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&#10;    &gt; id sem consectetuer libero luctus adipiscing.&#10;&#10;Markdown allows you to be lazy and only put the `&gt;` before the first&#10;line of a hard-wrapped paragraph:&#10;&#10;    &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&#10;    consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&#10;    Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&#10;&#10;    &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&#10;    id sem consectetuer libero luctus adipiscing.&#10;&#10;Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by&#10;adding additional levels of `&gt;`:&#10;&#10;    &gt; This is the first level of quoting.&#10;    &gt;&#10;    &gt; &gt; This is nested blockquote.&#10;    &gt;&#10;    &gt; Back to the first level.&#10;&#10;Blockquotes can contain other Markdown elements, including headers, lists,&#10;and code blocks:&#10;&#10;&#9;&gt; ## This is a header.&#10;&#9;&gt; &#10;&#9;&gt; 1.   This is the first list item.&#10;&#9;&gt; 2.   This is the second list item.&#10;&#9;&gt; &#10;&#9;&gt; Here&apos;s some example code:&#10;&#9;&gt; &#10;&#9;&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);&#10;&#10;Any decent text editor should make email-style quoting easy. For&#10;example, with BBEdit, you can make a selection and choose Increase&#10;Quote Level from the Text menu.&#10;&#10;&#10;&lt;h3 id=&quot;list&quot;&gt;Lists&lt;/h3&gt;&#10;&#10;Markdown supports ordered (numbered) and unordered (bulleted) lists.&#10;&#10;Unordered lists use asterisks, pluses, and hyphens -- interchangably&#10;-- as list markers:&#10;&#10;    *   Red&#10;    *   Green&#10;    *   Blue&#10;&#10;is equivalent to:&#10;&#10;    +   Red&#10;    +   Green&#10;    +   Blue&#10;&#10;and:&#10;&#10;    -   Red&#10;    -   Green&#10;    -   Blue&#10;&#10;Ordered lists use numbers followed by periods:&#10;&#10;    1.  Bird&#10;    2.  McHale&#10;    3.  Parish&#10;&#10;It&apos;s important to note that the actual numbers you use to mark the&#10;list have no effect on the HTML output Markdown produces. The HTML&#10;Markdown produces from the above list is:&#10;&#10;    &lt;ol&gt;&#10;    &lt;li&gt;Bird&lt;/li&gt;&#10;    &lt;li&gt;McHale&lt;/li&gt;&#10;    &lt;li&gt;Parish&lt;/li&gt;&#10;    &lt;/ol&gt;&#10;&#10;If you instead wrote the list in Markdown like this:&#10;&#10;    1.  Bird&#10;    1.  McHale&#10;    1.  Parish&#10;&#10;or even:&#10;&#10;    3. Bird&#10;    1. McHale&#10;    8. Parish&#10;&#10;you&apos;d get the exact same HTML output. The point is, if you want to,&#10;you can use ordinal numbers in your ordered Markdown lists, so that&#10;the numbers in your source match the numbers in your published HTML.&#10;But if you want to be lazy, you don&apos;t have to.&#10;&#10;If you do use lazy list numbering, however, you should still start the&#10;list with the number 1. At some point in the future, Markdown may support&#10;starting ordered lists at an arbitrary number.&#10;&#10;List markers typically start at the left margin, but may be indented by&#10;up to three spaces. List markers must be followed by one or more spaces&#10;or a tab.&#10;&#10;To make lists look nice, you can wrap items with hanging indents:&#10;&#10;    *   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&#10;        Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,&#10;        viverra nec, fringilla in, laoreet vitae, risus.&#10;    *   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.&#10;        Suspendisse id sem consectetuer libero luctus adipiscing.&#10;&#10;But if you want to be lazy, you don&apos;t have to:&#10;&#10;    *   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&#10;    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,&#10;    viverra nec, fringilla in, laoreet vitae, risus.&#10;    *   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.&#10;    Suspendisse id sem consectetuer libero luctus adipiscing.&#10;&#10;If list items are separated by blank lines, Markdown will wrap the&#10;items in `&lt;p&gt;` tags in the HTML output. For example, this input:&#10;&#10;    *   Bird&#10;    *   Magic&#10;&#10;will turn into:&#10;&#10;    &lt;ul&gt;&#10;    &lt;li&gt;Bird&lt;/li&gt;&#10;    &lt;li&gt;Magic&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;&#10;But this:&#10;&#10;    *   Bird&#10;&#10;    *   Magic&#10;&#10;will turn into:&#10;&#10;    &lt;ul&gt;&#10;    &lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;&#10;    &lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;&#10;List items may consist of multiple paragraphs. Each subsequent&#10;paragraph in a list item must be indented by either 4 spaces&#10;or one tab:&#10;&#10;    1.  This is a list item with two paragraphs. Lorem ipsum dolor&#10;        sit amet, consectetuer adipiscing elit. Aliquam hendrerit&#10;        mi posuere lectus.&#10;&#10;        Vestibulum enim wisi, viverra nec, fringilla in, laoreet&#10;        vitae, risus. Donec sit amet nisl. Aliquam semper ipsum&#10;        sit amet velit.&#10;&#10;    2.  Suspendisse id sem consectetuer libero luctus adipiscing.&#10;&#10;It looks nice if you indent every line of the subsequent&#10;paragraphs, but here again, Markdown will allow you to be&#10;lazy:&#10;&#10;    *   This is a list item with two paragraphs.&#10;&#10;        This is the second paragraph in the list item. You&apos;re&#10;    only required to indent the first line. Lorem ipsum dolor&#10;    sit amet, consectetuer adipiscing elit.&#10;&#10;    *   Another item in the same list.&#10;&#10;To put a blockquote within a list item, the blockquote&apos;s `&gt;`&#10;delimiters need to be indented:&#10;&#10;    *   A list item with a blockquote:&#10;&#10;        &gt; This is a blockquote&#10;        &gt; inside a list item.&#10;&#10;To put a code block within a list item, the code block needs&#10;to be indented *twice* -- 8 spaces or two tabs:&#10;&#10;    *   A list item with a code block:&#10;&#10;            &lt;code goes here&gt;&#10;&#10;&#10;It&apos;s worth noting that it&apos;s possible to trigger an ordered list by&#10;accident, by writing something like this:&#10;&#10;    1986. What a great season.&#10;&#10;In other words, a *number-period-space* sequence at the beginning of a&#10;line. To avoid this, you can backslash-escape the period:&#10;&#10;    1986\. What a great season.&#10;&#10;&#10;&#10;&lt;h3 id=&quot;precode&quot;&gt;Code Blocks&lt;/h3&gt;&#10;&#10;Pre-formatted code blocks are used for writing about programming or&#10;markup source code. Rather than forming normal paragraphs, the lines&#10;of a code block are interpreted literally. Markdown wraps a code block&#10;in both `&lt;pre&gt;` and `&lt;code&gt;` tags.&#10;&#10;To produce a code block in Markdown, simply indent every line of the&#10;block by at least 4 spaces or 1 tab. For example, given this input:&#10;&#10;    This is a normal paragraph:&#10;&#10;        This is a code block.&#10;&#10;Markdown will generate:&#10;&#10;    &lt;p&gt;This is a normal paragraph:&lt;/p&gt;&#10;&#10;    &lt;pre&gt;&lt;code&gt;This is a code block.&#10;    &lt;/code&gt;&lt;/pre&gt;&#10;&#10;One level of indentation -- 4 spaces or 1 tab -- is removed from each&#10;line of the code block. For example, this:&#10;&#10;    Here is an example of AppleScript:&#10;&#10;        tell application &quot;Foo&quot;&#10;            beep&#10;        end tell&#10;&#10;will turn into:&#10;&#10;    &lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;&#10;&#10;    &lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;&#10;        beep&#10;    end tell&#10;    &lt;/code&gt;&lt;/pre&gt;&#10;&#10;A code block continues until it reaches a line that is not indented&#10;(or the end of the article).&#10;&#10;Within a code block, ampersands (`&amp;`) and angle brackets (`&lt;` and `&gt;`)&#10;are automatically converted into HTML entities. This makes it very&#10;easy to include example HTML source code using Markdown -- just paste&#10;it and indent it, and Markdown will handle the hassle of encoding the&#10;ampersands and angle brackets. For example, this:&#10;&#10;        &lt;div class=&quot;footer&quot;&gt;&#10;            &amp;copy; 2004 Foo Corporation&#10;        &lt;/div&gt;&#10;&#10;will turn into:&#10;&#10;    &lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;&#10;        &amp;amp;copy; 2004 Foo Corporation&#10;    &amp;lt;/div&amp;gt;&#10;    &lt;/code&gt;&lt;/pre&gt;&#10;&#10;Regular Markdown syntax is not processed within code blocks. E.g.,&#10;asterisks are just literal asterisks within a code block. This means&#10;it&apos;s also easy to use Markdown to write about Markdown&apos;s own syntax.&#10;&#10;&#10;&#10;&lt;h3 id=&quot;hr&quot;&gt;Horizontal Rules&lt;/h3&gt;&#10;&#10;You can produce a horizontal rule tag (`&lt;hr /&gt;`) by placing three or&#10;more hyphens, asterisks, or underscores on a line by themselves. If you&#10;wish, you may use spaces between the hyphens or asterisks. Each of the&#10;following lines will produce a horizontal rule:&#10;&#10;    * * *&#10;&#10;    ***&#10;&#10;    *****&#10;&#10;    - - -&#10;&#10;    ---------------------------------------&#10;&#10;&#10;* * *&#10;&#10;&lt;h2 id=&quot;span&quot;&gt;Span Elements&lt;/h2&gt;&#10;&#10;&lt;h3 id=&quot;link&quot;&gt;Links&lt;/h3&gt;&#10;&#10;Markdown supports two style of links: *inline* and *reference*.&#10;&#10;In both styles, the link text is delimited by [square brackets].&#10;&#10;To create an inline link, use a set of regular parentheses immediately&#10;after the link text&apos;s closing square bracket. Inside the parentheses,&#10;put the URL where you want the link to point, along with an *optional*&#10;title for the link, surrounded in quotes. For example:&#10;&#10;    This is [an example](http://example.com/ &quot;Title&quot;) inline link.&#10;&#10;    [This link](http://example.net/) has no title attribute.&#10;&#10;Will produce:&#10;&#10;    &lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;&#10;    an example&lt;/a&gt; inline link.&lt;/p&gt;&#10;&#10;    &lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no&#10;    title attribute.&lt;/p&gt;&#10;&#10;If you&apos;re referring to a local resource on the same server, you can&#10;use relative paths:&#10;&#10;    See my [About](/about/) page for details.   &#10;&#10;Reference-style links use a second set of square brackets, inside&#10;which you place a label of your choosing to identify the link:&#10;&#10;    This is [an example][id] reference-style link.&#10;&#10;You can optionally use a space to separate the sets of brackets:&#10;&#10;    This is [an example] [id] reference-style link.&#10;&#10;Then, anywhere in the document, you define your link label like this,&#10;on a line by itself:&#10;&#10;    [id]: http://example.com/  &quot;Optional Title Here&quot;&#10;&#10;That is:&#10;&#10;*   Square brackets containing the link identifier (optionally&#10;    indented from the left margin using up to three spaces);&#10;*   followed by a colon;&#10;*   followed by one or more spaces (or tabs);&#10;*   followed by the URL for the link;&#10;*   optionally followed by a title attribute for the link, enclosed&#10;    in double or single quotes, or enclosed in parentheses.&#10;&#10;The following three link definitions are equivalent:&#10;&#10;&#9;[foo]: http://example.com/  &quot;Optional Title Here&quot;&#10;&#9;[foo]: http://example.com/  &apos;Optional Title Here&apos;&#10;&#9;[foo]: http://example.com/  (Optional Title Here)&#10;&#10;**Note:** There is a known bug in Markdown.pl 1.0.1 which prevents&#10;single quotes from being used to delimit link titles.&#10;&#10;The link URL may, optionally, be surrounded by angle brackets:&#10;&#10;    [id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;&#10;&#10;You can put the title attribute on the next line and use extra spaces&#10;or tabs for padding, which tends to look better with longer URLs:&#10;&#10;    [id]: http://example.com/longish/path/to/resource/here&#10;        &quot;Optional Title Here&quot;&#10;&#10;Link definitions are only used for creating links during Markdown&#10;processing, and are stripped from your document in the HTML output.&#10;&#10;Link definition names may consist of letters, numbers, spaces, and&#10;punctuation -- but they are *not* case sensitive. E.g. these two&#10;links:&#10;&#10;&#9;[link text][a]&#10;&#9;[link text][A]&#10;&#10;are equivalent.&#10;&#10;The *implicit link name* shortcut allows you to omit the name of the&#10;link, in which case the link text itself is used as the name.&#10;Just use an empty set of square brackets -- e.g., to link the word&#10;&quot;Google&quot; to the google.com web site, you could simply write:&#10;&#10;&#9;[Google][]&#10;&#10;And then define the link:&#10;&#10;&#9;[Google]: http://google.com/&#10;&#10;Because link names may contain spaces, this shortcut even works for&#10;multiple words in the link text:&#10;&#10;&#9;Visit [Daring Fireball][] for more information.&#10;&#10;And then define the link:&#10;&#9;&#10;&#9;[Daring Fireball]: http://daringfireball.net/&#10;&#10;Link definitions can be placed anywhere in your Markdown document. I&#10;tend to put them immediately after each paragraph in which they&apos;re&#10;used, but if you want, you can put them all at the end of your&#10;document, sort of like footnotes.&#10;&#10;Here&apos;s an example of reference links in action:&#10;&#10;    I get 10 times more traffic from [Google] [1] than from&#10;    [Yahoo] [2] or [MSN] [3].&#10;&#10;      [1]: http://google.com/        &quot;Google&quot;&#10;      [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;&#10;      [3]: http://search.msn.com/    &quot;MSN Search&quot;&#10;&#10;Using the implicit link name shortcut, you could instead write:&#10;&#10;    I get 10 times more traffic from [Google][] than from&#10;    [Yahoo][] or [MSN][].&#10;&#10;      [google]: http://google.com/        &quot;Google&quot;&#10;      [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;&#10;      [msn]:    http://search.msn.com/    &quot;MSN Search&quot;&#10;&#10;Both of the above examples will produce the following HTML output:&#10;&#10;    &lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;&#10;    title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from&#10;    &lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;&#10;    or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;&#10;&#10;For comparison, here is the same paragraph written using&#10;Markdown&apos;s inline link style:&#10;&#10;    I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)&#10;    than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or&#10;    [MSN](http://search.msn.com/ &quot;MSN Search&quot;).&#10;&#10;The point of reference-style links is not that they&apos;re easier to&#10;write. The point is that with reference-style links, your document&#10;source is vastly more readable. Compare the above examples: using&#10;reference-style links, the paragraph itself is only 81 characters&#10;long; with inline-style links, it&apos;s 176 characters; and as raw HTML,&#10;it&apos;s 234 characters. In the raw HTML, there&apos;s more markup than there&#10;is text.&#10;&#10;With Markdown&apos;s reference-style links, a source document much more&#10;closely resembles the final output, as rendered in a browser. By&#10;allowing you to move the markup-related metadata out of the paragraph,&#10;you can add links without interrupting the narrative flow of your&#10;prose.&#10;&#10;&#10;&lt;h3 id=&quot;em&quot;&gt;Emphasis&lt;/h3&gt;&#10;&#10;Markdown treats asterisks (`*`) and underscores (`_`) as indicators of&#10;emphasis. Text wrapped with one `*` or `_` will be wrapped with an&#10;HTML `&lt;em&gt;` tag; double `*`&apos;s or `_`&apos;s will be wrapped with an HTML&#10;`&lt;strong&gt;` tag. E.g., this input:&#10;&#10;    *single asterisks*&#10;&#10;    _single underscores_&#10;&#10;    **double asterisks**&#10;&#10;    __double underscores__&#10;&#10;will produce:&#10;&#10;    &lt;em&gt;single asterisks&lt;/em&gt;&#10;&#10;    &lt;em&gt;single underscores&lt;/em&gt;&#10;&#10;    &lt;strong&gt;double asterisks&lt;/strong&gt;&#10;&#10;    &lt;strong&gt;double underscores&lt;/strong&gt;&#10;&#10;You can use whichever style you prefer; the lone restriction is that&#10;the same character must be used to open and close an emphasis span.&#10;&#10;Emphasis can be used in the middle of a word:&#10;&#10;    un*frigging*believable&#10;&#10;But if you surround an `*` or `_` with spaces, it&apos;ll be treated as a&#10;literal asterisk or underscore.&#10;&#10;To produce a literal asterisk or underscore at a position where it&#10;would otherwise be used as an emphasis delimiter, you can backslash&#10;escape it:&#10;&#10;    \*this text is surrounded by literal asterisks\*&#10;&#10;&#10;&#10;&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;&#10;&#10;To indicate a span of code, wrap it with backtick quotes (`` ` ``).&#10;Unlike a pre-formatted code block, a code span indicates code within a&#10;normal paragraph. For example:&#10;&#10;    Use the `printf()` function.&#10;&#10;will produce:&#10;&#10;    &lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;&#10;&#10;To include a literal backtick character within a code span, you can use&#10;multiple backticks as the opening and closing delimiters:&#10;&#10;    ``There is a literal backtick (`) here.``&#10;&#10;which will produce this:&#10;&#10;    &lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;&#10;&#10;The backtick delimiters surrounding a code span may include spaces --&#10;one after the opening, one before the closing. This allows you to place&#10;literal backtick characters at the beginning or end of a code span:&#10;&#10;&#9;A single backtick in a code span: `` ` ``&#10;&#9;&#10;&#9;A backtick-delimited string in a code span: `` `foo` ``&#10;&#10;will produce:&#10;&#10;&#9;&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;&#10;&#9;&#10;&#9;&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;&#10;&#10;With a code span, ampersands and angle brackets are encoded as HTML&#10;entities automatically, which makes it easy to include example HTML&#10;tags. Markdown will turn this:&#10;&#10;    Please don&apos;t use any `&lt;blink&gt;` tags.&#10;&#10;into:&#10;&#10;    &lt;p&gt;Please don&apos;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;&#10;&#10;You can write this:&#10;&#10;    `&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.&#10;&#10;to produce:&#10;&#10;    &lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded&#10;    equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;h3 id=&quot;img&quot;&gt;Images&lt;/h3&gt;&#10;&#10;Admittedly, it&apos;s fairly difficult to devise a &quot;natural&quot; syntax for&#10;placing images into a plain text document format.&#10;&#10;Markdown uses an image syntax that is intended to resemble the syntax&#10;for links, allowing for two styles: *inline* and *reference*.&#10;&#10;Inline image syntax looks like this:&#10;&#10;    ![Alt text](/path/to/img.jpg)&#10;&#10;    ![Alt text](/path/to/img.jpg &quot;Optional title&quot;)&#10;&#10;That is:&#10;&#10;*   An exclamation mark: `!`;&#10;*   followed by a set of square brackets, containing the `alt`&#10;    attribute text for the image;&#10;*   followed by a set of parentheses, containing the URL or path to&#10;    the image, and an optional `title` attribute enclosed in double&#10;    or single quotes.&#10;&#10;Reference-style image syntax looks like this:&#10;&#10;    ![Alt text][id]&#10;&#10;Where &quot;id&quot; is the name of a defined image reference. Image references&#10;are defined using syntax identical to link references:&#10;&#10;    [id]: url/to/image  &quot;Optional title attribute&quot;&#10;&#10;As of this writing, Markdown has no syntax for specifying the&#10;dimensions of an image; if this is important to you, you can simply&#10;use regular HTML `&lt;img&gt;` tags.&#10;&#10;&#10;* * *&#10;&#10;&#10;&lt;h2 id=&quot;misc&quot;&gt;Miscellaneous&lt;/h2&gt;&#10;&#10;&lt;h3 id=&quot;autolink&quot;&gt;Automatic Links&lt;/h3&gt;&#10;&#10;Markdown supports a shortcut style for creating &quot;automatic&quot; links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:&#10;&#10;    &lt;http://example.com/&gt;&#10;    &#10;Markdown will turn this into:&#10;&#10;    &lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;&#10;&#10;Automatic links for email addresses work similarly, except that&#10;Markdown will also perform a bit of randomized decimal and hex&#10;entity-encoding to help obscure your address from address-harvesting&#10;spambots. For example, Markdown will turn this:&#10;&#10;    &lt;address@example.com&gt;&#10;&#10;into something like this:&#10;&#10;    &lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&#10;    &amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&#10;    &amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&#10;    &amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&#10;&#10;which will render in a browser as a clickable link to &quot;address@example.com&quot;.&#10;&#10;(This sort of entity-encoding trick will indeed fool many, if not&#10;most, address-harvesting bots, but it definitely won&apos;t fool all of&#10;them. It&apos;s better than nothing, but an address published in this way&#10;will probably eventually start receiving spam.)&#10;&#10;&#10;&#10;&lt;h3 id=&quot;backslash&quot;&gt;Backslash Escapes&lt;/h3&gt;&#10;&#10;Markdown allows you to use backslash escapes to generate literal&#10;characters which would otherwise have special meaning in Markdown&apos;s&#10;formatting syntax. For example, if you wanted to surround a word&#10;with literal asterisks (instead of an HTML `&lt;em&gt;` tag), you can use&#10;backslashes before the asterisks, like this:&#10;&#10;    \*literal asterisks\*&#10;&#10;Markdown provides backslash escapes for the following characters:&#10;&#10;    \   backslash&#10;    `   backtick&#10;    *   asterisk&#10;    _   underscore&#10;    {}  curly braces&#10;    []  square brackets&#10;    ()  parentheses&#10;    #   hash mark&#10;&#9;+   plus sign&#10;&#9;-   minus sign (hyphen)&#10;    .   dot&#10;    !   exclamation mark&#10;"></outline>
</body>
</opml>

